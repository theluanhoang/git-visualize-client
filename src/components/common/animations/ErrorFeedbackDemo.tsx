'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import ErrorFeedbackModal from './ErrorFeedbackModal';
import { AlertTriangle, GitBranch, MessageSquare, User } from 'lucide-react';

export default function ErrorFeedbackDemo() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentErrors, setCurrentErrors] = useState<any[]>([]);

  const simulateCommitErrors = () => {
    const errors = [
      { type: 'commit', field: 'count', expected: 2, actual: 1 },
      { type: 'message', field: 'content', expected: 'Add new feature', actual: 'Fix bug' },
      { type: 'author', field: 'name', expected: 'John Doe', actual: 'Jane Smith' }
    ];
    setCurrentErrors(errors);
    setIsModalOpen(true);
  };

  const simulateBranchErrors = () => {
    const errors = [
      { type: 'branch', field: 'name', expected: 'feature/new-feature', actual: 'main' },
      { type: 'commit', field: 'count', expected: 3, actual: 1 }
    ];
    setCurrentErrors(errors);
    setIsModalOpen(true);
  };

  const simulateFileErrors = () => {
    const errors = [
      { type: 'file', field: 'count', expected: 5, actual: 2 },
      { type: 'file', field: 'name', expected: 'app.js', actual: 'index.js' },
      { type: 'commit', field: 'count', expected: 2, actual: 1 },
      { type: 'message', field: 'content', expected: 'Update documentation', actual: 'Fix typo' }
    ];
    setCurrentErrors(errors);
    setIsModalOpen(true);
  };

  const simulateComplexErrors = () => {
    const errors = [
      { type: 'commit', field: 'count', expected: 5, actual: 2 },
      { type: 'branch', field: 'name', expected: 'develop', actual: 'main' },
      { type: 'message', field: 'content', expected: 'Implement user authentication', actual: 'Add login form' },
      { type: 'author', field: 'email', expected: 'john@example.com', actual: 'jane@example.com' },
      { type: 'file', field: 'count', expected: 10, actual: 3 },
      { type: 'commit', field: 'hash', expected: 'abc123', actual: 'def456' }
    ];
    setCurrentErrors(errors);
    setIsModalOpen(true);
  };

  return (
    <div className="p-6 space-y-6">
      <div className="text-center">
        <h3 className="text-2xl font-bold mb-2">üö® Error Feedback Modal Demo</h3>
        <p className="text-gray-600 dark:text-gray-300">
          M√¥ ph·ªèng c√°c lo·∫°i l·ªói validation kh√°c nhau ƒë·ªÉ xem Error Feedback Modal
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5 text-blue-500" />
              L·ªói Commit
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
              M√¥ ph·ªèng l·ªói v·ªÅ s·ªë l∆∞·ª£ng commit, n·ªôi dung commit v√† th√¥ng tin t√°c gi·∫£
            </p>
            <Button 
              onClick={simulateCommitErrors}
              className="w-full bg-blue-500 hover:bg-blue-600"
            >
              M√¥ ph·ªèng l·ªói Commit
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <GitBranch className="h-5 w-5 text-green-500" />
              L·ªói Branch
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
              M√¥ ph·ªèng l·ªói v·ªÅ t√™n branch v√† s·ªë l∆∞·ª£ng commit tr√™n branch
            </p>
            <Button 
              onClick={simulateBranchErrors}
              className="w-full bg-green-500 hover:bg-green-600"
            >
              M√¥ ph·ªèng l·ªói Branch
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5 text-purple-500" />
              L·ªói File
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
              M√¥ ph·ªèng l·ªói v·ªÅ s·ªë l∆∞·ª£ng file, t√™n file v√† c√°c th√¥ng tin kh√°c
            </p>
            <Button 
              onClick={simulateFileErrors}
              className="w-full bg-purple-500 hover:bg-purple-600"
            >
              M√¥ ph·ªèng l·ªói File
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-red-500" />
              L·ªói Ph·ª©c T·∫°p
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
              M√¥ ph·ªèng nhi·ªÅu lo·∫°i l·ªói kh√°c nhau c√πng l√∫c
            </p>
            <Button 
              onClick={simulateComplexErrors}
              className="w-full bg-red-500 hover:bg-red-600"
            >
              M√¥ ph·ªèng l·ªói ph·ª©c t·∫°p
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Features Info */}
      <Card>
        <CardHeader>
          <CardTitle>üé® T√≠nh nƒÉng Error Feedback Modal</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <h4 className="font-semibold text-orange-600 dark:text-orange-400 mb-2">üéØ Th√¥ng tin r√µ r√†ng</h4>
              <ul className="space-y-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ Ti√™u ƒë·ªÅ th√¢n thi·ªán v√† kh√≠ch l·ªá</li>
                <li>‚Ä¢ T√≥m t·∫Øt s·ªë l∆∞·ª£ng l·ªói</li>
                <li>‚Ä¢ Ph√¢n lo·∫°i l·ªói theo lo·∫°i</li>
                <li>‚Ä¢ So s√°nh r√µ r√†ng Expected vs Current</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-blue-600 dark:text-blue-400 mb-2">üé® Thi·∫øt k·∫ø th√¢n thi·ªán</h4>
              <ul className="space-y-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ M√†u s·∫Øc c·∫£nh b√°o nh∆∞ng kh√¥ng g√¢y s·ª£ h√£i</li>
                <li>‚Ä¢ Icon ph√¢n bi·ªát c√°c lo·∫°i l·ªói</li>
                <li>‚Ä¢ Animation m∆∞·ª£t m√†</li>
                <li>‚Ä¢ Responsive v√† accessible</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-green-600 dark:text-green-400 mb-2">üí° H∆∞·ªõng d·∫´n t√≠ch c·ª±c</h4>
              <ul className="space-y-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ L·ªùi khuy√™n kh√≠ch l·ªá</li>
                <li>‚Ä¢ H∆∞·ªõng d·∫´n c·ª• th·ªÉ</li>
                <li>‚Ä¢ N√∫t th·ª≠ l·∫°i v√† xem g·ª£i √Ω</li>
                <li>‚Ä¢ Th√¥ng ƒëi·ªáp ƒë·ªông d·ª±a tr√™n s·ªë l·ªói</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-purple-600 dark:text-purple-400 mb-2">üîß T√≠ch h·ª£p d·ªÖ d√†ng</h4>
              <ul className="space-y-1 text-gray-600 dark:text-gray-300">
                <li>‚Ä¢ Hook qu·∫£n l√Ω state</li>
                <li>‚Ä¢ Parse t·ª± ƒë·ªông t·ª´ validation message</li>
                <li>‚Ä¢ T√πy ch·ªânh ho√†n to√†n</li>
                <li>‚Ä¢ T√≠ch h·ª£p v·ªõi existing feedback system</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Error Feedback Modal */}
      <ErrorFeedbackModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        errorCount={currentErrors.length}
        errors={currentErrors}
        onRetry={() => {
          setIsModalOpen(false);
          console.log('Retry clicked');
        }}
        onViewHint={() => {
          setIsModalOpen(false);
          console.log('View hint clicked');
        }}
      />
    </div>
  );
}
